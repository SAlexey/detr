# -*- coding: utf-8 -*-
"""LitDetrMRI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KwkVapQrVfBNTEnAwSY33ty2YIxygFup


# Rapid prototyping notebook
Use this to prototype quick ideas, then move to a script to scale up!

[Remember! we're always available for support on Slack](https://join.slack.com/t/pytorch-lightning/shared_invite/zt-f6bl2l0l-JYMK3tbAgAmGRrlNr00f1A)

---
## Setup

# DETR + MRI

+ detr (object detection)
+ hydra-core (configuration)
+ torchio (data loading)
+ ablumentation (data augmentation)
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# ! pip install pytorch-lightning
# ! pip install pytorch-lightning-bolts
# ! pip install albumentations 
# ! pip install torchio
# ! pip install hydra-core
#


import os
from argparse import Namespace
from enum import Enum
from pathlib import Path
from random import random
from typing import List, Optional

import albumentations as A
import matplotlib.pyplot as plt
import numpy as np
import pytorch_lightning as pl
import torch
import torch.distributed as dist
import torchvision
from pytorch_lightning.metrics.functional import accuracy
from scipy import ndimage
from scipy.optimize import linear_sum_assignment
from torch import nn
from torch.nn import functional as F
from torch.utils.data import DataLoader, Dataset
from torchvision import ops

from datasets.transforms_2d import *
from util.box_ops import mask_to_bbox
from util.callbacks import EvaluateObjectDetection

# os.environ["KMP_DUPLICATE_LIB_OK"] = "True"

"""## Utils

"""

def _max_by_axis(the_list):
    # type: (List[List[int]]) -> List[int]
    maxes = the_list[0]
    for sublist in the_list[1:]:
        for index, item in enumerate(sublist):
            maxes[index] = max(maxes[index], item)
    return maxes


def nested_tensor_from_tensor_list(tensor_list: List[torch.Tensor]):
    # TODO make this more general
    if tensor_list[0].ndim == 3:
        if torchvision._is_tracing():
            # nested_tensor_from_tensor_list() does not export well to ONNX
            # call _onnx_nested_tensor_from_tensor_list() instead
            return _onnx_nested_tensor_from_tensor_list(tensor_list)

        # TODO make it support different-sized images
        max_size = _max_by_axis([list(img.shape) for img in tensor_list])
        # min_size = tuple(min(s) for s in zip(*[img.shape for img in tensor_list]))
        batch_shape = [len(tensor_list)] + max_size
        b, c, h, w = batch_shape
        dtype = tensor_list[0].dtype
        device = tensor_list[0].device
        tensor = torch.zeros(batch_shape, dtype=dtype, device=device)
        mask = torch.ones((b, h, w), dtype=torch.bool, device=device)
        for img, pad_img, m in zip(tensor_list, tensor, mask):
            pad_img[: img.shape[0], : img.shape[1], : img.shape[2]].copy_(img)
            m[: img.shape[1], :img.shape[2]] = False
    else:
        raise ValueError('not supported')
    return NestedTensor(tensor, mask)

def is_dist_avail_and_initialized():
    if not dist.is_available():
        return False
    if not dist.is_initialized():
        return False
    return True


def get_world_size():
    if not is_dist_avail_and_initialized():
        return 1
    return dist.get_world_size()


class NestedTensor(object):
    def __init__(self, tensors, mask: Optional[torch.Tensor]):
        self.tensors = tensors
        self.mask = mask

    def to(self, device):
        # type: (Device) -> NestedTensor # noqa
        cast_tensor = self.tensors.to(device)
        mask = self.mask
        if mask is not None:
            assert mask is not None
            cast_mask = mask.to(device)
        else:
            cast_mask = None
        return NestedTensor(cast_tensor, cast_mask)

    def decompose(self):
        return self.tensors, self.mask

    def __repr__(self):
        return str(self.tensors)


def collate_fn(batch):
    batch = list(zip(*batch))
    batch[0] = nested_tensor_from_tensor_list(batch[0])
    return tuple(batch)

"""---
## Data
"""
## % 
# DATA_ROOT = Path("/scratch/visual/ashestak/oai/v00/dicom/augmented_overfit")


class LitDataset(Dataset):

    def __init__(self, items, transform=None):
        self.items = items 
        self.transform = transform

    def __len__(self):
        return len(self.items)

    def _get_meniscus_slice(self, idx):
        item = np.load(self.items[idx])            
        image = item["image"]
        mask = item["mask"]

        label = next(i for i in (5,6) if i in mask)
        

        mask = (mask == label).astype(int)

        (_, sl, *_) = ndimage.find_objects(mask)[0]

        sl = (sl.start + sl.stop) // 2
        
        image = image[0, sl, ...]
        mask = mask[0, sl, ...]

        image = np.stack((image, )*3)

        return image, mask

    def __getitem__(self, idx):
        
        image, mask = self._get_meniscus_slice(idx)

        if self.transform is not None: 
            image, mask = self.transform(image, mask)

        mask = mask.long()
        
        _, bbox = mask_to_bbox(mask)

        bbox = ops.box_convert(bbox, "xyxy", "cxcywh") / torch.as_tensor((300, 300, 300, 300))

        return image, {"boxes": bbox, "labels": torch.as_tensor([1])}


# for subj in subjects: 
#     norm = transform(subj)

#     box = ndimage.find_objects(norm.mask.data.squeeze().long())
#     bx, by = next(i for i in box if i is not None)
#     box = torch.as_tensor((bx.start, by.start, bx.stop, by.stop))
#     box = box / torch.as_tensor((300, 300, 300, 300))
#     # print(box)

    

#     _image = torch.cat((norm.image.data,) * 3, 1).squeeze(0)


#     # print(_image.shape)

#     # plt.figure()
#     # plt.imshow(_image, "gray")
    
#     # ax = plt.gca()
#     # ax.add_patch(plt.Rectangle((by.start, bx.start), by.stop - by.start, bx.stop - bx.start, fill=False, ec="red"))
    
    
#     items.append((_image, {"boxes": ops.box_convert(box, "xyxy", "cxcywh").unsqueeze(0), "labels": torch.as_tensor([1])}))



#     image = np.rot90(norm.image.data.squeeze())
#     mask = np.rot90(norm.mask.data.squeeze())

#     image = torch.as_tensor(image.copy())
#     mask = torch.as_tensor(mask.copy())

#     image = torch.cat((image.unsqueeze(0), )*3)

#     box = ndimage.find_objects(mask.squeeze().long())
#     bx, by = next(i for i in box if i is not None)
#     box = torch.as_tensor((bx.start, by.start, bx.stop, by.stop))
#     box = box / torch.as_tensor((300, 300, 300, 300))
#     # print(box)

#     # plt.figure()
#     # plt.imshow(image, "gray")

#     # ax = plt.gca()
#     # ax.add_patch(plt.Rectangle((by.start, bx.start), by.stop - by.start, bx.stop - bx.start, fill=False, ec="red"))
#     # print(image.shape)
#     items.append((image, {"boxes": ops.box_convert(box, "xyxy", "cxcywh").unsqueeze(0), "labels": torch.as_tensor([1])}))
    


"""## Criterion

"""

class SetCriterion(nn.Module):
    """ This class computes the loss for DETR.
    The process happens in two steps:
        1) we compute hungarian assignment between ground truth boxes and the outputs of the model
        2) we supervise each pair of matched ground-truth / prediction (supervise class and box)
    """
    def __init__(self, num_classes, matcher, weight_dict, eos_coef, losses):
        """ Create the criterion.
        Parameters:
            num_classes: number of object categories, omitting the special no-object category
            matcher: module able to compute a matching between targets and proposals
            weight_dict: dict containing as key the names of the losses and as values their relative weight.
            eos_coef: relative classification weight applied to the no-object category
            losses: list of all the losses to be applied. See get_loss for list of available losses.
        """
        super().__init__()
        self.num_classes = num_classes
        self.matcher = matcher
        self.weight_dict = weight_dict
        self.eos_coef = eos_coef
        self.losses = losses
        empty_weight = torch.ones(self.num_classes + 1)
        empty_weight[-1] = self.eos_coef
        self.register_buffer('empty_weight', empty_weight)

    def loss_labels(self, outputs, targets, indices, num_boxes, log=False):
        """Classification loss (NLL)
        targets dicts must contain the key "labels" containing a tensor of dim [nb_target_boxes]
        """
        assert 'pred_logits' in outputs
        src_logits = outputs['pred_logits']

        idx = self._get_src_permutation_idx(indices)
        target_classes_o = torch.cat([t["labels"][J] for t, (_, J) in zip(targets, indices)])
        target_classes = torch.full(src_logits.shape[:2], self.num_classes,
                                    dtype=torch.int64, device=src_logits.device)
        target_classes[idx] = target_classes_o

        loss_ce = F.cross_entropy(src_logits.transpose(1, 2), target_classes, self.empty_weight)
        losses = {'loss_ce': loss_ce}

        if log:
            # TODO this should probably be a separate loss, not hacked in this one here
            losses['class_error'] = 100 - accuracy(src_logits[idx], target_classes_o)[0]
        return losses

    @torch.no_grad()
    def loss_cardinality(self, outputs, targets, indices, num_boxes):
        """ Compute the cardinality error, ie the absolute error in the number of predicted non-empty boxes
        This is not really a loss, it is intended for logging purposes only. It doesn't propagate gradients
        """
        pred_logits = outputs['pred_logits']
        device = pred_logits.device
        tgt_lengths = torch.as_tensor([len(v["labels"]) for v in targets], device=device)
        # Count the number of predictions that are NOT "no-object" (which is the last class)
        card_pred = (pred_logits.argmax(-1) != pred_logits.shape[-1] - 1).sum(1)
        card_err = F.l1_loss(card_pred.float(), tgt_lengths.float())
        losses = {'cardinality_error': card_err}
        return losses

    def loss_boxes(self, outputs, targets, indices, num_boxes):
        """Compute the losses related to the bounding boxes, the L1 regression loss and the GIoU loss
           targets dicts must contain the key "boxes" containing a tensor of dim [nb_target_boxes, 4]
           The target boxes are expected in format (center_x, center_y, w, h), normalized by the image size.
        """
        assert 'pred_boxes' in outputs
        idx = self._get_src_permutation_idx(indices)
        src_boxes = outputs['pred_boxes'][idx]
        target_boxes = torch.cat([
            t['boxes'][i] 
            for t, (_, i) in zip(targets, indices)], dim=0)

        loss_bbox = F.l1_loss(src_boxes, target_boxes, reduction='none')

        losses = {}
        losses['loss_bbox'] = loss_bbox.sum() / num_boxes

        loss_giou = 1 - torch.diag(ops.generalized_box_iou(
            ops.box_convert(src_boxes, "cxcywh", "xyxy"),
            ops.box_convert(target_boxes, "cxcywh", "xyxy")))
        losses['loss_giou'] = loss_giou.sum() / num_boxes
        return losses

    def loss_masks(self, outputs, targets, indices, num_boxes):
        """Compute the losses related to the masks: the focal loss and the dice loss.
           targets dicts must contain the key "masks" containing a tensor of dim [nb_target_boxes, h, w]
        """
        assert "pred_masks" in outputs

        src_idx = self._get_src_permutation_idx(indices)
        tgt_idx = self._get_tgt_permutation_idx(indices)
        src_masks = outputs["pred_masks"]
        src_masks = src_masks[src_idx]
        masks = [t["masks"] for t in targets]
        # TODO use valid to mask invalid areas due to padding in loss
        target_masks, valid = nested_tensor_from_tensor_list(masks).decompose()
        target_masks = target_masks.to(src_masks)
        target_masks = target_masks[tgt_idx]

        # upsample predictions to the target size
        src_masks = interpolate(src_masks[:, None], size=target_masks.shape[-2:],
                                mode="bilinear", align_corners=False)
        src_masks = src_masks[:, 0].flatten(1)

        target_masks = target_masks.flatten(1)
        target_masks = target_masks.view(src_masks.shape)
        losses = {
            "loss_mask": sigmoid_focal_loss(src_masks, target_masks, num_boxes),
            "loss_dice": dice_loss(src_masks, target_masks, num_boxes),
        }
        return losses

    def _get_src_permutation_idx(self, indices):
        # permute predictions following indices
        batch_idx = torch.cat([torch.full_like(src, i) for i, (src, _) in enumerate(indices)])
        src_idx = torch.cat([src for (src, _) in indices])
        return batch_idx, src_idx

    def _get_tgt_permutation_idx(self, indices):
        # permute targets following indices
        batch_idx = torch.cat([torch.full_like(tgt, i) for i, (_, tgt) in enumerate(indices)])
        tgt_idx = torch.cat([tgt for (_, tgt) in indices])
        return batch_idx, tgt_idx

    def get_loss(self, loss, outputs, targets, indices, num_boxes, **kwargs):
        loss_map = {
            'labels': self.loss_labels,
            'cardinality': self.loss_cardinality,
            'boxes': self.loss_boxes,
            'masks': self.loss_masks
        }
        assert loss in loss_map, f'do you really want to compute {loss} loss?'
        return loss_map[loss](outputs, targets, indices, num_boxes, **kwargs)

    def forward(self, outputs, targets):
        """ This performs the loss computation.
        Parameters:
             outputs: dict of tensors, see the output specification of the model for the format
             targets: list of dicts, such that len(targets) == batch_size.
                      The expected keys in each dict depends on the losses applied, see each loss' doc
        """
        outputs_without_aux = {k: v for k, v in outputs.items() if k != 'aux_outputs'}

        # Retrieve the matching between the outputs of the last layer and the targets
        indices = self.matcher(outputs_without_aux, targets)

        # Compute the average number of target boxes accross all nodes, for normalization purposes
        num_boxes = sum(len(t["labels"]) for t in targets)
        num_boxes = torch.as_tensor([num_boxes], dtype=torch.float, device=next(iter(outputs.values())).device)
        if is_dist_avail_and_initialized():
            torch.distributed.all_reduce(num_boxes)
        num_boxes = torch.clamp(num_boxes / get_world_size(), min=1).item()

        # Compute all the requested losses
        losses = {}
        for loss in self.losses:
            losses.update(self.get_loss(loss, outputs, targets, indices, num_boxes))

        # In case of auxiliary losses, we repeat this process with the output of each intermediate layer.
        if 'aux_outputs' in outputs:
            for i, aux_outputs in enumerate(outputs['aux_outputs']):
                indices = self.matcher(aux_outputs, targets)
                for loss in self.losses:
                    if loss == 'masks':
                        # Intermediate masks losses are too costly to compute, we ignore them.
                        continue
                    kwargs = {}
                    if loss == 'labels':
                        # Logging is enabled only for the last layer
                        kwargs = {'log': False}
                    l_dict = self.get_loss(loss, aux_outputs, targets, indices, num_boxes, **kwargs)
                    l_dict = {k + f'_{i}': v for k, v in l_dict.items()}
                    losses.update(l_dict)

        return losses


class HungarianMatcher(nn.Module):
    """This class computes an assignment between the targets and the predictions of the network
    For efficiency reasons, the targets don't include the no_object. Because of this, in general,
    there are more predictions than targets. In this case, we do a 1-to-1 matching of the best predictions,
    while the others are un-matched (and thus treated as non-objects).
    """

    def __init__(self, cost_class: float = 1, cost_bbox: float = 1, cost_giou: float = 1):
        """Creates the matcher
        Params:
            cost_class: This is the relative weight of the classification error in the matching cost
            cost_bbox: This is the relative weight of the L1 error of the bounding box coordinates in the matching cost
            cost_giou: This is the relative weight of the giou loss of the bounding box in the matching cost
        """
        super().__init__()
        self.cost_class = cost_class
        self.cost_bbox = cost_bbox
        self.cost_giou = cost_giou
        assert cost_class != 0 or cost_bbox != 0 or cost_giou != 0, "all costs cant be 0"

    @torch.no_grad()
    def forward(self, outputs, targets):
        """ Performs the matching
        Params:
            outputs: This is a dict that contains at least these entries:
                 "pred_logits": Tensor of dim [batch_size, num_queries, num_classes] with the classification logits
                 "pred_boxes": Tensor of dim [batch_size, num_queries, 4] with the predicted box coordinates
            targets: This is a list of targets (len(targets) = batch_size), where each target is a dict containing:
                 "labels": Tensor of dim [num_target_boxes] (where num_target_boxes is the number of ground-truth
                           objects in the target) containing the class labels
                 "boxes": Tensor of dim [num_target_boxes, 4] containing the target box coordinates
        Returns:
            A list of size batch_size, containing tuples of (index_i, index_j) where:
                - index_i is the indices of the selected predictions (in order)
                - index_j is the indices of the corresponding selected targets (in order)
            For each batch element, it holds:
                len(index_i) = len(index_j) = min(num_queries, num_target_boxes)
        """
        bs, num_queries = outputs["pred_logits"].shape[:2]

        # We flatten to compute the cost matrices in a batch
        out_prob = outputs["pred_logits"].flatten(0, 1).softmax(-1)  # [batch_size * num_queries, num_classes]
        out_bbox = outputs["pred_boxes"].flatten(0, 1)  # [batch_size * num_queries, 4]

        # Also concat the target labels and boxes
        tgt_ids = torch.cat([v["labels"] for v in targets])
        tgt_bbox = torch.cat([v["boxes"] for v in targets])

        # Compute the classification cost. Contrary to the loss, we don't use the NLL,
        # but approximate it in 1 - proba[target class].
        # The 1 is a constant that doesn't change the matching, it can be ommitted.
        cost_class = -out_prob[:, tgt_ids]

        # Compute the L1 cost between boxes
        cost_bbox = torch.cdist(out_bbox, tgt_bbox, p=1)

        # Compute the giou cost betwen boxes
        cost_giou = -ops.generalized_box_iou(ops.box_convert(out_bbox, "cxcywh", "xyxy"), ops.box_convert(tgt_bbox, "cxcywh", "xyxy"))

        # Final cost matrix
        C = self.cost_bbox * cost_bbox + self.cost_class * cost_class + self.cost_giou * cost_giou
        C = C.view(bs, num_queries, -1).cpu()

        sizes = [len(v["boxes"]) for v in targets]
        indices = [linear_sum_assignment(c[i]) for i, c in enumerate(C.split(sizes, -1))]
        return [(torch.as_tensor(i, dtype=torch.int64), torch.as_tensor(j, dtype=torch.int64)) for i, j in indices]

"""---

## Model
"""

STAGE = Enum("STAGE", (("TRAIN", "training"), ("VAL", "validation")))

class LitDETRMRI(pl.LightningModule):

    def __init__(self):
        super().__init__()
        self.model = torch.hub.load('facebookresearch/detr', 'detr_resnet50', pretrained=True)
        self.criterion = SetCriterion(
            num_classes=91, 
            matcher=HungarianMatcher(1, 2, 2), 
            weight_dict={"loss_bbox": 5, "loss_giou": 2},
            eos_coef=0.1, 
            losses=["boxes", "labels"]
            )
        
        self.hparams = Namespace(lr_backbone=0.0001, lr_transformer=0.0001, lr=0.001, weight_decay=0.0001)

        self._enc_self_attn = []
        self._dec_self_attn = []
        self._conf_features = []

    def forward(self, batch):
        output = self.model(batch)
        return output

    def _compute_loss(self, output, target, stage=STAGE.TRAIN):
        losses_dict = self.criterion(output, target)
        weight_dict = self.criterion.weight_dict
        loss = sum(weight_dict[k] * losses_dict[k] for k in weight_dict)
        losses_dict = {
            f"{stage.value}_{loss}": value for loss, value in losses_dict.items()
        }
        return loss, losses_dict

    

    # def training_epoch_end(self, out):
    #     loss = torch.stack([step["loss"] for step in out]).mean()
    #     if self.current_epoch % 20 == 0:
    #         self.print(f"Epoch {self.current_epoch} | Avg. Training Loss: {loss:.4f}")

    # def validation_epoch_end(self, out):
    #     if self.current_epoch % 20 == 0:
    #         loss = torch.stack([step["loss"] for step in out]).mean()
    #         self.print(f"Epoch {self.current_epoch} | Avg. Validation Loss: {loss:.4f}")

    def _add_hooks(self):

        hooks = [
            self.model.backbone[-2].register_forward_hook(
                lambda _, input, output: self._conv_features.append(output)
            ),
            self.model.transformer.encoder.layers[-1].self_attn.register_forward_hook(
                lambda _, input, output: self._enc_attn_weights.append(output[1])
            ),
            self.model.transformer.decoder.layers[-1].multihead_attn.register_forward_hook(
                lambda _, input, output: self._dec_attn_weights.append(output[1])
            ),
        ]
        return hooks

    def _reset_params(self, hooks=[]):
        self._conv_features = []
        self._enc_self_attn = []
        self._dec_self_attn = []
        for hook in hooks:
            hook.remove()

    def _visualize_attention(self):

        conv_features, enc_attn_weights, dec_attn_weights = [], [], []

        

        # propagate through the model
        outputs = model(img)

        for hook in hooks:
            hook.remove()

        # don't need the list anymore
        conv_features = conv_features[0]
        enc_attn_weights = enc_attn_weights[0]
        dec_attn_weights = dec_attn_weights[0]

    
    @torch.no_grad()
    def _plot_results(self, img, out, tgt):
        
        (bs, _, ih, iw) = img.shape

        fig, axes = plt.subplots(ncols=bs, figsize=(16,6))
        scale =  torch.as_tensor((ih, iw, ih, iw))


        img = img.cpu()

        indices = self.criterion.matcher(out, tgt)
        idx = self.criterion._get_src_permutation_idx(indices)
        
        src_boxes = out['pred_boxes'][idx]
        tgt_boxes = torch.cat([t['boxes'][i] for t, (_, i) in zip(tgt, indices)], dim=0)

        ious = ops.box_iou(ops.box_convert(src_boxes, "cxcywh", "xyxy"), ops.box_convert(tgt_boxes, "cxcywh", "xyxy")).diag()

        for ax, im, out_bb, tgt_bb, iou in zip(axes, img, src_boxes, tgt_boxes, ious):

            ax.imshow(im[0], "gray")

            out_bb = out_bb.cpu()
            tgt_bb = tgt_bb.cpu()
            
            tgt_boxes_scaled = tgt_bb * scale 
            out_boxes_scaled = out_bb * scale
                        
            out_xywh = ops.box_convert(out_boxes_scaled, "cxcywh", "xywh")
            tgt_xywh = ops.box_convert(tgt_boxes_scaled, "cxcywh", "xywh")


            # print(tgt_xywh)
            x, y, w, h = tgt_xywh.unbind()
            tgt_rect = plt.Rectangle((y, x), h, w, fill=False, ec="darkgreen")

            x, y, w, h = out_xywh.unbind()
            out_rect = plt.Rectangle((y, x), h, w, fill=False, ec="orange")
            
            ax.add_patch(tgt_rect)
            ax.add_patch(out_rect)

            ax.text(y - 10, x, f"iou={iou:.2f}", fontsize=10, bbox=dict(facecolor='darkgreen', alpha=0.5))

        self.logger.experiment.add_figure(f"epoch_{self.current_epoch:02d}(step={self.global_step})_bbox_results", fig)
        
    def training_step(self, batch, *args, **kwargs):
        inputs, target = batch
        output = self.forward(inputs)
        loss, loss_dict = self._compute_loss(output, target, stage=STAGE.TRAIN)
        self.log("training_loss", loss, on_epoch=True, on_step=False)
        self.log_dict(loss_dict, on_epoch=True, on_step=True)

        # if self.current_epoch %20 == 0:
        #     self._plot_results(inputs.tensors, output, target)
        return loss


    def validation_step(self, batch, *args, **kwargs):
        inputs, target = batch
        output = self.forward(inputs)
        loss, loss_dict = self._compute_loss(output, target, stage=STAGE.VAL)
        output["loss"] = loss
        self.log("validation_loss", loss, on_epoch=True, on_step=False)
        self.log_dict(loss_dict, on_epoch=True, on_step=False)

        # if self.current_epoch % 20 == 0:
        #     self._plot_results(inputs.tensors, output, target)

        return output

    def configure_optimizers(self):
        param_dicts = [
            {
                "params": [
                    p
                    for n, p in self.named_parameters()
                    if "backbone" not in n and p.requires_grad
                ],
                "lr": self.hparams.lr_transformer,
            },
            {
                "params": [
                    p
                    for n, p in self.named_parameters()
                    if "backbone" in n and p.requires_grad
                ],
                "lr": self.hparams.lr_backbone,
            },
        ]
        return torch.optim.AdamW(
            param_dicts, self.hparams.lr, weight_decay=self.hparams.weight_decay
        )



if __name__ == "__main__":

    DATA_ROOT = Path("/scratch/visual/ashestak/oai/v00/numpy")
    assert DATA_ROOT.exists()
    queue = DATA_ROOT.rglob("subject.npz")

    subjects = list(queue)

    # while (len(subjects)<120):

    #     item = np.load(next(queue))
        
    #     image = item["image"][0, 50, ...]
    #     mask = item["mask"][0, 50, ...]

    #     mask = mask == 5

    #     if not mask.any():
    #         continue

    #     image = np.stack((image, )*3)

    #     subjects.append((image, mask))

    np.random.seed(42)
    np.random.shuffle(subjects)

    train = subjects[:8000]
    val = subjects[8000:]


    train_transforms = Compose([
        ToTensor(), 
        Rot90(p=0.5), 
        RandomFlip(),
        CenterCrop((300, 300)), 
        ZNormalize(), 
        Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])

    val_transforms = Compose([
        ToTensor(), CenterCrop((300, 300)), ZNormalize(), Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])


    train = LitDataset(train, transform=train_transforms)

    print("Train: ", len(train))

    train = DataLoader(train, batch_size=8, collate_fn=collate_fn, num_workers=6)

    val = LitDataset(val, transform=val_transforms)

    print("Val: ", len(val))
    val = DataLoader(val, batch_size=8, collate_fn=collate_fn, num_workers=6)

    """---
    ## Train
    NOTE: in colab, set progress_bar_refresh_rate high or the screen will freeze because of the rapid tqdm update speed.
    """

    # init model
    detr = LitDETRMRI()
    evaluate = EvaluateObjectDetection(on_training=True, num_classes=91)
    resume =  None#"/scratch/visual/ashestak/detr/lightning_logs/version_5555749/checkpoints/epoch=2100-step=32687.ckpt"

    # Initialize a trainer
    trainer = pl.Trainer(gpus=0, 
        max_epochs=5000, 
        progress_bar_refresh_rate=30, 
        resume_from_checkpoint=resume, 
        overfit_batches=4, 
        callbacks=[evaluate]
    )

    # Train the model ⚡

    trainer.fit(detr, train, val)

    """---
    ## Test
    """

"""---
## Visualize
"""

# Commented out IPython magic to ensure Python compatibility.
# Start tensorboard.
# %load_ext tensorboard
# %tensorboard --logdir lightning_logs/

"""---
## Observations
Do your analysis and notes here!
"""
# %%
